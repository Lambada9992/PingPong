Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <TextView\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Hello World!\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintLeft_toLeftOf=\"parent\"\r\n        app:layout_constraintRight_toRightOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
--- a/app/src/main/res/layout/activity_main.xml	
+++ b/app/src/main/res/layout/activity_main.xml	
@@ -1,18 +1,57 @@
 <?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     tools:context=".MainActivity">
 
+    <Button
+        android:id="@+id/bLeft"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="Left"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/bRight"
+        app:layout_constraintStart_toStartOf="parent" />
+
+    <Button
+        android:id="@+id/bRight"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="Right"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toEndOf="@+id/bLeft"
+        app:layout_constraintEnd_toEndOf="parent" />
+
     <TextView
+        android:id="@+id/tvMainLabel"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="Hello World!"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintLeft_toLeftOf="parent"
-        app:layout_constraintRight_toRightOf="parent"
+        android:text="Status"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
 
+    <EditText
+        android:id="@+id/etIp"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:digits="0123456789."
+        android:ems="10"
+        android:inputType="number"
+        app:layout_constraintBottom_toTopOf="@+id/bRight"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/tvMainLabel" />
+
+    <Button
+        android:id="@+id/button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Button"
+        app:layout_constraintBottom_toTopOf="@+id/bRight"
+        app:layout_constraintStart_toEndOf="@+id/etIp"
+        app:layout_constraintTop_toBottomOf="@+id/tvMainLabel" />
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: ../PingPong_App/main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <QApplication>\r\n\r\n#include \"game.h\"\r\n#include \"tcpserver.h\"\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    QApplication a(argc, argv);\r\n\r\n    Game game;\r\n\r\n    return a.exec();\r\n    //test2\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../PingPong_App/main.cpp b/../PingPong_App/main.cpp
--- a/../PingPong_App/main.cpp	
+++ b/../PingPong_App/main.cpp	
@@ -9,6 +9,9 @@
 
     Game game;
 
+    TcpServer tcpServer;
+    tcpServer.startServer(1234);
+
     return a.exec();
     //test2
 }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.pingpongcontroller\">\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.PingPongController\">\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	
+++ b/app/src/main/AndroidManifest.xml	
@@ -2,6 +2,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.example.pingpongcontroller">
 
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     <application
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
Index: app/src/main/java/com/example/pingpongcontroller/ConnectionHandler.java
===================================================================
diff --git a/app/src/main/java/com/example/pingpongcontroller/ConnectionHandler.java b/app/src/main/java/com/example/pingpongcontroller/ConnectionHandler.java
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/pingpongcontroller/ConnectionHandler.java	
@@ -0,0 +1,119 @@
+package com.example.pingpongcontroller;
+
+import java.io.*;
+import java.net.Socket;
+import java.util.concurrent.LinkedBlockingQueue;
+
+
+public class ConnectionHandler extends Thread {
+    private final Socket socket;
+
+    public interface ConnectionHandlerInterpreter{
+        void interpret(String message);
+    }
+    private ConnectionHandlerInterpreter connectionHandlerInterpreter;
+
+    public enum Status {CONNECTED, DISCONNECTED}
+    private Status status = Status.DISCONNECTED;
+    private final LinkedBlockingQueue<String> out = new LinkedBlockingQueue<String>();
+    private BufferedReader inBuffer;
+    private BufferedWriter outBuffer;
+    private Thread writerThread;
+    private Thread readerThread;
+
+    public ConnectionHandler(Socket socket, ConnectionHandlerInterpreter connectionHandlerInterpreter) {
+        this.socket = socket;
+        this.connectionHandlerInterpreter = connectionHandlerInterpreter;
+        try {
+            inBuffer = new BufferedReader(new InputStreamReader(socket.getInputStream()));
+            outBuffer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private final Runnable reader = () -> {
+        while (!Thread.currentThread().isInterrupted()) {
+            try {
+                String message = inBuffer.readLine().trim();
+                connectionHandlerInterpreter.interpret(message);
+            } catch (IOException | NullPointerException e) {
+                break;
+            }
+        }
+        this.close();
+    };
+
+    private final Runnable writer = () -> {
+        while (!Thread.currentThread().isInterrupted()) {
+            try {
+                String message = out.take();
+                outBuffer.write(message + "\r\n");
+                outBuffer.flush();
+            } catch (IOException e) {
+                e.printStackTrace();
+            } catch (InterruptedException | NullPointerException e) {
+                break;
+            }
+        }
+        this.close();
+    };
+
+    @Override
+    public void run() {
+        try {
+            status = Status.CONNECTED;
+            writerThread = new Thread(writer);
+            readerThread = new Thread(reader);
+            writerThread.start();
+            readerThread.start();
+
+            //waiting for close
+            synchronized (this) {
+                this.wait();
+            }
+
+            writerThread.interrupt();
+            readerThread.interrupt();
+
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        } finally {
+            status = Status.DISCONNECTED;
+            try {
+                outBuffer.close();
+                socket.close();
+                inBuffer.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+            try {
+                readerThread.join();
+                writerThread.join();
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public void write(String message) {
+        try {
+            out.put(message);
+        } catch (InterruptedException ignored) {
+        }
+    }
+
+    public void close() {
+        synchronized (this) {
+            this.notify();
+        }
+    }
+
+    public Status getStatus() {
+        return status;
+    }
+
+    public Socket getSocket(){
+        return this.socket;
+    }
+}
Index: app/src/main/java/com/example/pingpongcontroller/PingPongController.kt
===================================================================
diff --git a/app/src/main/java/com/example/pingpongcontroller/PingPongController.kt b/app/src/main/java/com/example/pingpongcontroller/PingPongController.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/pingpongcontroller/PingPongController.kt	
@@ -0,0 +1,55 @@
+package com.example.pingpongcontroller
+
+import java.io.IOException
+import java.lang.Exception
+import java.net.ConnectException
+import java.net.Socket
+import java.util.regex.Pattern
+
+
+class PingPongController : ConnectionHandler.ConnectionHandlerInterpreter{
+
+    public var connectionHandler : ConnectionHandler? = null
+
+    private val port = 1234
+    private val IPV4_REGEX = "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
+            "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
+            "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
+            "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
+    private val IPv4_PATTERN: Pattern = Pattern.compile(IPV4_REGEX)
+
+    fun disconnect() {
+        connectionHandler?.apply { close() }
+    }
+
+    override fun interpret(message: String?) {
+
+    }
+
+    fun connect(ip: String) {
+        if (!IPv4_PATTERN.matcher(ip).matches()) throw Exception("Invalid IP")
+        connectionHandler = connectionHandler?.run{
+            disconnect()
+            join()
+            null
+        }
+
+        Thread(Runnable {
+            try {
+                val socket = Socket(ip, port)
+                connectionHandler = ConnectionHandler(socket, this)
+                connectionHandler!!.start()
+                connectionHandler!!.write("Wiadomosc :)")
+            } catch (e: ConnectException) {
+                e.printStackTrace()
+            } catch (e: IOException) {
+                e.printStackTrace()
+            }
+        }
+        ).start()
+    }
+
+    public fun getCh(): ConnectionHandler? {
+        return this.connectionHandler
+    }
+}
\ No newline at end of file
Index: ../PingPong_App/sockethandler.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"sockethandler.h\"\r\n\r\nSocketHandler::SocketHandler(qintptr socketDescriptor, QObject *parent) : QThread(parent)\r\n{\r\n    this->socketDescriptor = socketDescriptor;\r\n}\r\n\r\nvoid SocketHandler::run()\r\n{\r\n    qDebug() << \"starting new thread\";\r\n    socket = new QTcpSocket();\r\n    if(!socket->setSocketDescriptor(this->socketDescriptor)){\r\n        emit error(socket->error());\r\n        return;\r\n    }\r\n    connect(socket,SIGNAL(readyRead()),this,SLOT(readyRead()),Qt::DirectConnection);\r\n    connect(socket,SIGNAL(disconnected()),this,SLOT(disconnected()),Qt::DirectConnection);\r\n\r\n    exec();\r\n}\r\n\r\nvoid SocketHandler::readyRead()\r\n{\r\n    QByteArray data = socket->readAll();\r\n    socket->write(data);\r\n    socket->flush();\r\n}\r\n\r\nvoid SocketHandler::disconnected()\r\n{\r\n    socket->deleteLater();\r\n    exit(0);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../PingPong_App/sockethandler.cpp b/../PingPong_App/sockethandler.cpp
--- a/../PingPong_App/sockethandler.cpp	
+++ b/../PingPong_App/sockethandler.cpp	
@@ -23,6 +23,7 @@
 {
     QByteArray data = socket->readAll();
     socket->write(data);
+    qDebug() << data;
     socket->flush();
 }
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,5 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="..\:/DEV/mix/PingPong/PingPong_Android_Controller/app/src/main/res/layout/activity_main.xml" value="0.3179347826086957" />
+      </map>
+    </option>
+  </component>
   <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	
+++ b/.idea/gradle.xml	
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
